
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://owuvfujjvlpjbkvxdafz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im93dXZmdWpqdmxwamJrdnhkYWZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA2MDk5NzYsImV4cCI6MjA1NjE4NTk3Nn0.oS3i2I6_ns7ixo1fw_rEJdlhOIcrIiKJqCh7aniafwQ";

// Create Supabase client with improved configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce',
      storageKey: 'find-and-bask-auth',
    },
    global: {
      headers: {
        'X-Supabase-Client-Info': 'lovable-app',
      },
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Add error interceptor to handle common Supabase errors
const originalFrom = supabase.from.bind(supabase);
supabase.from = (table) => {
  const query = originalFrom(table);
  
  // Intercept errors for better handling
  const originalSelect = query.select.bind(query);
  query.select = function(...args) {
    const selectQuery = originalSelect(...args);
    const originalThen = selectQuery.then.bind(selectQuery);
    
    selectQuery.then = function(onFulfilled, onRejected) {
      return originalThen(
        (result) => {
          if (result.error) {
            console.error(`Supabase error (${table}):`, result.error);
            
            // Show toast for specific errors
            if (result.error.message.includes('permission denied')) {
              toast.error(`Access denied`, {
                description: "You don't have permission to access this data"
              });
            }
          }
          return onFulfilled ? onFulfilled(result) : result;
        },
        onRejected
      );
    };
    
    return selectQuery;
  };
  
  return query;
};

// Initialize application - create required storage buckets if they don't exist
(async () => {
  try {
    console.log("Checking if required storage buckets exist...");
    
    // Check if user is authenticated before trying to create buckets
    const { data: authData } = await supabase.auth.getSession();
    if (!authData.session) {
      console.log("Not creating storage buckets - user not authenticated");
      return;
    }
    
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error("Error checking storage buckets:", error);
      
      // If error indicates permission issue, we won't try to create the bucket
      if (error.message.includes('permission denied')) {
        console.log("Permission denied when checking buckets - skipping bucket creation");
        return;
      }
    }
    
    // Check if found-item-images bucket exists
    const foundItemBucket = buckets?.find(bucket => bucket.name === 'found-item-images');
    
    if (!foundItemBucket) {
      console.log("Creating found-item-images bucket...");
      try {
        const { data, error } = await supabase.storage.createBucket('found-item-images', {
          public: true,
          fileSizeLimit: 10485760, // 10MB
          allowedMimeTypes: ['image/png', 'image/jpeg', 'image/gif', 'image/webp']
        });
        
        if (error) {
          // Special handling for permission errors
          if (error.message.includes('permission denied')) {
            console.log("Permission denied when creating bucket - you may need to run the SQL migration");
          } else {
            console.error("Error creating storage bucket:", error);
          }
        } else {
          console.log("Storage bucket created successfully:", data);
        }
      } catch (bucketError) {
        console.error("Exception creating bucket:", bucketError);
      }
    } else {
      console.log("Found-item-images bucket already exists");
    }
  } catch (error) {
    console.error("Error initializing storage:", error);
  }
})();

// Helper function to check and handle permissions errors
export const handleSupabaseError = (error: any) => {
  if (!error) return null;
  
  console.error("Supabase error:", error);
  
  if (error.message.includes('permission denied')) {
    toast.error("Permission denied", {
      description: "You don't have permission to perform this action. Please check your account permissions."
    });
    return "permission_denied";
  }
  
  if (error.message.includes('JWT expired')) {
    toast.error("Session expired", {
      description: "Your session has expired. Please log in again."
    });
    return "session_expired";
  }
  
  toast.error("An error occurred", {
    description: error.message || "Please try again later"
  });
  
  return error.code || "unknown_error";
};
